(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;
; loop over config files and load
;
;https://github.com/krgn/mu4e-setup/blob/master/init.el
(setq relative-config-dir "~/repos/dotfiles/elisp/")
(setq setup-files-dir "config/")
(setq dot-files 
      (mapcar (lambda (item) (concat relative-config-dir setup-files-dir item))
           (list "setup-org.el"         ;org-mode
                 "setup-mu4e.el"        ;mu4e
                 "setup-auctex.el"
                 ;;filladapt, highlight-region, plocal, browse-kiil-ring, highlight-chars
                 ;;browse-url, gist, magit, elpy
                 "setup-small.el"
                 )))
(dolist (file dot-files) (load-file file))

(use-package yasnippet
  :ensure t
  :config
  (setq yas-triggers-in-field t)
  (setq yas-snippet-dirs
        '("~/repos/snippets"
          yas-installed-snippets-dir))
  (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
                                        ;http://orgmode.org/manual/Conflicts.html
  (add-hook 'org-mode-hook
            (lambda ()
              (org-set-local 'yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand))))

(use-package org-crypt
   :config
   (org-crypt-use-before-save-magic)
   ;; GPG key to use for encryption
   ;; Either the Key ID or set to nil to use symmetric encryption.
   (setq org-crypt-key nil))
   
(use-package eldoro
  :ensure t)

;end modernize

(select-keys) ; choose-a-buffer for keys f3 and f9-f12

(global-set-key [f9] 'python-mode)
(global-set-key [f8] 'org-mode)
(global-set-key [f7] 'fill-paragraph)
(global-set-key [f6] 'auto-fill-mode) 
(global-set-key [f5] 'choose-a-buffer) 
(global-set-key [f4] 'choose-a-buffer) 
(global-set-key [f3] 'choose-a-buffer) 
(global-set-key [f2] 'choose-csh2) 
(global-set-key [f1] 'choose-csh1) 


(setq grep-command "grep -n -H -i ")


(defun choose-csh1 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh1"))

(defun choose-csh2 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh2"))

(defun choose-python (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "*ABI Ipython*"))


(defun choose-research (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "research.org"))


(defun choose-teaching (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "teaching.org"))

(defun choose-admin (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "admin.org"))

(defun choose-personal (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "personal.org"))

(defun choose-gtd (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "gtd.org"))

(defun choose-refile (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "refile.org"))


(make-shell "csh1")    ; Create a shell called "csh1"
(other-window 1)
(make-shell "csh2")    ; Create another shell in the other window

(put 'downcase-region 'disabled nil)

;######################


(defun gtd ()
   (interactive)
   (find-file "~/repos/org/gtd.org")
)


(defun research ()
   (interactive)
   (find-file "~/repos/org/research.org")
)

(defun refile ()
   (interactive)
   (find-file "~/repos/org/refile.org")
)


(defun teaching ()
   (interactive)
   (find-file "~/repos/org/teaching.org")
)

(defun admin ()
   (interactive)
   (find-file "~/repos/org/admin.org")
)


(defun personal ()
   (interactive)
   (find-file "~/repos/org/personal.org")
)

(defun tasks ()
  (interactive)
  (find-file "~/repos/org/tasks.org")
  )


                                        ;(gtd)
(research)
(admin)
(teaching)
(personal)
(refile)
;(tasks)



(global-set-key "\C-cp" 'choose-personal)
(global-set-key "\C-cr" 'choose-research)
(global-set-key "\C-ci" 'choose-teaching)
(global-set-key "\C-cw" 'choose-admin)
(global-set-key "\C-cg" 'choose-gtd)
(global-set-key "\C-ct" 'choose-refile)


(put 'dired-find-alternate-file 'disabled nil)

;;https://github.com/jhelwig/ack-and-a-half
;;http://beyondgrep.com/
;;curl http://beyondgrep.com/ack-2.10-single-file > ~/bin/ack && chmod 0755 !#:3
;;(add-to-list 'load-path "/path/to/ack-and-a-half")
(require 'ack-and-a-half)
;; Create shorter aliases
(defalias 'ack 'ack-and-a-half)
(defalias 'ack-same 'ack-and-a-half-same)
(defalias 'ack-find-file 'ack-and-a-half-find-file)
(defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
(setq ack-and-a-half-executable "/Users/phil/bin/ack")

(defvar server-buffer-clients)
(when (and (fboundp 'server-start) (string-equal (getenv "TERM") 'xterm))
  (server-start)
  (defun fp-kill-server-with-buffer-routine ()
    (and server-buffer-clients (server-done)))
  (add-hook 'kill-buffer-hook 'fp-kill-server-with-buffer-routine))


(setenv "or" "/Users/phil/repos/org")
(setenv "rm" "/Users/phil/repos/readmes")

;;http://lists.gnu.org/archive/html/emacs-orgmode/2010-04/msg01057.html
;; 1. window gets split horizontally (one on TOP of the other), AND
;; 2. AFTER splitting, further "C-x 4 b" will NOT lead to any more splitting - reuse gets preferred
(setq split-height-threshold 40) ; nil
(setq split-width-threshold nil) ; 100


;http://www.emacswiki.org/emacs/FrameSize
(add-to-list 'default-frame-alist '(height . 55))
(add-to-list 'default-frame-alist '(width . 180))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;(setq inhibit-startup-screen t)
;(setq initial-major-mode 'org-mode)
(require 'magit)
(setq load-path (cons (expand-file-name "~phil/repos/emacs-ipython-notebook/lisp") load-path))

;; (require 'ein-loaddefs)
;; (eval-when-compile (require 'ein-notebooklist))
;; (require 'ein)

;http://tex.stackexchange.com/questions/24510/pdflatex-fails-within-emacs-app-but-works-in-terminal
;http://ergoemacs.org/emacs/emacs_env_var_paths.html

(setq exec-path
'(
"/usr/local/texlive/2015/bin/x86_64-darwin"
"/Users/phil/bin"
"/usr/local/bin"
"/usr/bin"
"/bin"
"/usr/sbin"
))

(getenv "PATH")
 (setenv "PATH"
(concat
 "/usr/local/texlive/2015/bin/x86_64-darwin" ":"
 "/usr/local/bin" ":"
(getenv "PATH")))

(setq-default indent-tabs-mode nil)

(setenv "e340"
(concat
   (getenv "HOME")
   "/Dropbox/e340_2014_spring/"))

(setenv "e340f"
(concat
   (getenv "HOME")
   "/Dropbox/e340 FILES FOR CONNECT/"))


(setenv "ecode"
(concat
   (getenv "HOME")
   "/repos/e582_code/"))

(setenv "eweb"
(concat
   (getenv "HOME")
   "/repos/e582_web/"))

(load-theme 'adwaita t)


(defun markdown-preview-file ()
  "use Marked 2 to preview the current file"
  (interactive)
  (shell-command 
   (format "open -a 'Marked 2.app' %s" 
           (shell-quote-argument (buffer-file-name))))
  )
(global-set-key "\C-cm" 'markdown-preview-file)


(dolist (hook '(rst-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
      
(autoload 'vkill "vkill" nil t)
(autoload 'list-unix-processes "vkill" nil t)


(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(setq org-ellipsis "â¤µ")
(show-paren-mode 1)


; ;http://emacs.stackexchange.com/questions/10900/copy-text-from-emacs-to-os-x-clipboard
; (defun copy-from-osx ()
;   (shell-command-to-string "/usr/bin/pbpaste"))

; (defun paste-to-osx (text &optional push)
;   (let ((process-connection-type nil))
;     (let ((proc (start-process "/usr/bin/pbcopy" "*Messages*" "pbcopy")))
;       (process-send-string proc text)
;       (process-send-eof proc))))

; (setq interprogram-cut-function 'paste-to-osx)
; (setq interprogram-paste-function 'copy-from-osx)


;https://github.com/rranelli/auto-package-update.el
(require 'auto-package-update)
;(auto-package-update-maybe)
;(auto-package-update-now)


(server-start)

(setq-default ispell-program-name "/usr/local/bin/ispell")
(setq auto-mode-alist (cons '("\\.txt\\'" . text-mode) auto-mode-alist))

;;http://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/

(global-aggressive-indent-mode 1)
;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)

;;narrow dired to match filter
(use-package dired-narrow
  :ensure t
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
              

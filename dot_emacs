(setq load-path (cons (expand-file-name "~phil/usr64/share/emacs/site-lisp") load-path))
(setq load-path (cons (expand-file-name "~phil/elisp") load-path))
(setq load-path (cons (expand-file-name "~phil/elisp/misc") load-path))
(setq load-path (cons (expand-file-name "~phil/elisp/bbdb-2.35/lisp") load-path))
(setq load-path (cons (expand-file-name "~phil/elisp/python-mode") load-path))
(setq load-path (cons "/home/phil/install/ahg/" load-path))
;(setq load-path (cons (expand-file-name "~phil/elisp/notes-mode-gnu/lisp") load-path))
;(setq load-path (cons (expand-file-name "~phil/elisp/site-lisp") load-path))

   ;http://www.emacswiki.org/emacs/CopyAndPaste#toc5
   (setq transient-mark-mode t)  ;  makes the region act quite like the text "highlight" in many apps.
   (setq mouse-drag-copy-region nil)  ; stops selection with a mouse being immediately injected to the kill ring
   (setq x-select-enable-primary nil)  ; stops killing/yanking interacting with primary X11 selection 
   (setq x-select-enable-clipboard t)  ; makes killing/yanking interact with clipboard X11 selection

   ;; these will probably be already set to these values, leave them that way if so!
   ; (setf interprogram-cut-function 'x-select-text)
   ; (setf interprogram-paste-function 'x-cut-buffer-or-selection-value)

   ; this doesn't always quite work right at time of writing, see emacs bug #902, but when it does,
   ; it makes "highlight/middlebutton" style (X11 primary selection based) copy-paste work as expected
   ; if you're used to other modern apps (that is to say, the mere act of highlighting doesn't
   ; overwrite the clipboard or alter the kill ring, but you can paste in merely highlighted 
   ; text with the mouse if you want to)
   (setq select-active-regions t) ;  active region sets primary X11 selection
   (global-set-key [mouse-2] 'mouse-yank-primary)  ; make mouse middle-click only paste from primary X11 selection, not clipboard and kill ring.

   ;; with this, doing an M-y will also affect the X11 clipboard, making emacs act as a sort of clipboard history, at
   ;; least of text you've pasted into it in the first place.
   ; (setq yank-pop-change-selection t)  ; makes rotating the kill
   ; ring change the X11 clipboard.  


;; Turn off the annoying default backup behaviour
(if (file-directory-p "~/.emacs.d/backup")
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
    (message "Directory does not exist: ~/.emacs.d/backup"))

(setq debug-on-error t)
;(setq-default py-python-command (getenv "MYIPYTHON"))

(load-library "mailcrypt")
(mc-setversion "gpg") ;; Alternately, "2.6" or "gpg"

;from: http://trey-jackson.blogspot.com/2008/08/emacs-tip-25-shell-dirtrack-by-prompt.html
(add-hook 'shell-mode-hook
        #'(lambda ()
            (shell-dirtrack-mode nil)
            (add-hook 'comint-preoutput-filter-functions
                      'shell-sync-dir-with-prompt nil t)))

(defun shell-sync-dir-with-prompt (string)
"A preoutput filter function (see `comint-preoutput-filter-functions')
which sets the shell buffer's path to the path embedded in a prompt string.
This is a more reliable way of keeping the shell buffer's path in sync
with the shell, without trying to pattern match against all
potential directory-changing commands, ala `shell-dirtrack-mode'.

In order to work, your shell must be configured to embed its current
working directory into the prompt.  Here is an example .zshrc and .bashrc
snippet which turns this behavior on when running as an inferior Emacs shell:

zsh

  if [ $EMACS ]; then
     prompt='|Pr0mPT|%~|[%n@%m]%~%# '
  fi

The part that Emacs cares about is the '|Pr0mPT|%~|'
Everything past that can be tailored to your liking.
"
(if (string-match "|Pr0mPT|\\([^|]*\\)|" string)
    (let ((cwd (match-string 1 string)))
      (setq default-directory
            (if (string-equal "/" (substring cwd -1))
                cwd
              (setq cwd (concat cwd "/"))))
      (replace-match "" t t string 0))
  string))



;; add my ~/elisp directory and all subdirectories to load-path
;; (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
;;         (let* ((my-lisp-dir (expand-file-name "~/elisp"))
;;               (default-directory my-lisp-dir))
;;            (setq load-path (cons my-lisp-dir load-path))
;;            (normal-top-level-add-subdirs-to-load-path)))



(setq font-lock-maximum-decoration t)
(add-hook 'python-mode-hook 'turn-on-font-lock)
(load "psvn")
(load "emacs-python")
(setq-default calendar-latitude +49.2333)
(setq-default calendar-longitude -123.25)

;(require 'moinmoin-mode)
(require 'bbdb)
(bbdb-initialize)

(require 'show-wspace);
(add-hook 'font-lock-mode-hook 'highlight-tabs)
(require 'session)
(add-hook 'after-init-hook 'session-initialize)
(setq x-select-enable-clipboard t)
(menu-bar-enable-clipboard)

;(require 'table)

(load "plocal")        ; local functions for geography
;(load "dirtrack")     ; Follows the directory in shell mode (better)
(load "dired-delete-direc") ;recursively delete directories
(load "highlight-region") ; prepend text to a region

(setq auto-mode-alist (append '(("\\.ht$" . rst-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.rst$" . rst-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.pyx$" . python-mode)) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.nm\\'" . notes-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.txt\\'" . notes-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.tex\\'" . latex-mode) auto-mode-alist))

(require 'notes-variables)
(setq auto-mode-alist
  	(cons (cons "/9[0-9][0-9][0-9][0-9][0-9].?$" 'notes-mode)
  	      auto-mode-alist))
(define-key global-map "\C-cn" 'notes-index-todays-link)
(define-key global-map [(control c) (return)] 'notes-w3-follow-link)


(select-keys) ; choose-a-buffer for keys f9-f12

(global-set-key [f8] 'compile)
(global-set-key [f7] 'fill-paragraph)
(global-set-key [f6] 'auto-fill-mode) 
(global-set-key [f5] 'overwrite-mode) 
(global-set-key [f4] 'rst-mode) 
(global-set-key [f3] 'choose-python) 
(global-set-key [f2] 'choose-csh2) 
(global-set-key [f1] 'choose-csh1) 

(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(load "reftex")
(setq reftex-insert-label-flags '("se" "sfte"))
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(setq reftex-enable-partial-scans t)
(setq reftex-save-parse-info t)
(setq reftex-use-multiple-selection-buffers t)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-cite-format 'natbib)

(setq grep-command "grep -n -H -i ")


(defun choose-csh1 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh1"))

(defun choose-csh2 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh2"))

(defun choose-python (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "*Python*"))


;; Bind this to control-X w (normally undefined):
(setq browse-url-browser-function 'browse-url-netscape)
(setq browse-url-netscape-program "firefox")
(global-set-key "\C-xw" browse-url-browser-function)
	;; Note: no quote       ^


(autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
(setq matlab-shell-command-switches '("-nojvm"))
(setq visible-bell t)                 ; flash screen for bell
(setq-default indent-tabs-mode nil)  ;no tabs for indentation
(put 'set-goal-column 'disabled nil)

(defun go-matching-paren ()
  "Move cursor to the matching parenthesis."
  (interactive)
  (cond ((looking-at "[[({]") (forward-sexp 1) (backward-char 1))
        ((looking-at "[])}]") (forward-char 1) (backward-sexp 1))
        (t (ding) (message "Unbalanced parenthesis"))))

(define-key global-map "\C-cg" 'go-matching-paren)

 (when (or (string-match "XEmacs\\|Lucid" emacs-version) window-system)
    (require 'mic-paren) ; loading
    (paren-activate)     ; activating
    ;;; set here any of the customizable variables of mic-paren, e.g.:
    ;;; ...
 )


(require 'filladapt)
(setq-default filladapt-mode t)



(put 'scroll-left 'disabled nil)

(put 'upcase-region 'disabled nil)

(put 'downcase-region 'disabled nil)
(require 'rst)

(defun dired-do-shell-command-in-background (command)
"In dired, do shell command in background on the file or directory named on this line."
(interactive
(list (dired-read-shell-command (concat "& on " "%s: ") nil (list (dired-get-filename)))))
(call-process command nil 0 nil (dired-get-filename)))

; http://www.gatago.com/gnu/emacs/help/16477675.html 

(add-hook 'dired-load-hook
(function (lambda ()
(load "dired-x")
(define-key dired-mode-map "&" 'dired-do-shell-command-in-background))))

(setq dired-guess-shell-alist-user
(list (list "\\.wav$" "snack") (list "\\.au$" "snack") (list "\\.pdf$" "acroread") (list "\\.mp3$" "xmms")
(list "\\.m3u$" "xmms") (list "\\.txt$" "emacsclient") (list "\\.ppt$" "ooffice" )
(list "\\.doc$" "ooffice" ) (list "\\.xls$" "ooffice" ) (list "\\.xls$" "ooffice") (list "\\.jpg$" "firefox") (list "\\.JPG$" "firefox")
(list "\\.png$" "firefox") ))

(global-set-key "\C-x\/" `point-to-register)
(global-set-key "\C-xj" `jump-to-register)


(load "browse-yank")
(global-set-key [?\C-x ?\C-y] 'browse-yank)

(load "dired-x")
(define-key dired-mode-map "&" 'dired-do-shell-command-in-background)
(server-start)

(require 'tramp)
;(load "magpie")

(setq minibuffer-max-depth nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(load-home-init-file t t)
 '(rst-mode-lazy nil)
 '(vc-handled-backends (quote (Hg RCS CVS SVN SCCS Bzr Git Arch))))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )



(make-shell "csh1")    ; Create a shell called "csh1"
(other-window 1)
(make-shell "csh2")    ; Create another shell in the other window

(defun go-matching-paren ()
  "Move cursor to the matching parenthesis."
  (interactive)
  (cond ((looking-at "[[({]") (forward-sexp 1) (backward-char 1))
        ((looking-at "[])}]") (forward-char 1) (backward-sexp 1))
        (t (ding) (message "Unbalanced parenthesis"))))

(define-key global-map "\C-cg" 'go-matching-paren)


;;abbreviations -------------------

(define-key global-map "\C-xx" 'abbrev-mode)


(setq hippie-expand-try-functions-list 
   '(try-complete-file-name-partially 
     try-complete-file-name 
     try-expand-all-abbrevs 
     try-expand-list 
     try-expand-line 
     try-expand-dabbrev 
     try-expand-dabbrev-all-buffers 
     try-expand-dabbrev-from-kill 
     try-complete-lisp-symbol-partially 
     try-complete-lisp-symbol)) 

(setq save-abbrevs t)
(quietly-read-abbrev-file) 
(setq message-log-max 500)
(setq log-message-max-size 500)
(load-file "~/elisp/misc/my-text.el")

(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (quietly-read-abbrev-file "/home/phil/.abbrev_defs")
	    (setq local-abbrev-table LaTeX-mode-abbrev-table)
 	    (abbrev-mode t)
 	    ))

(setq-default abbrev-mode t)                            ; enable abbreviations
(setq save-abbrevs t)                                   ; save abbreviations upo

; Tell XEmacs to load `my-latex.el' when opening LaTeX files
(add-hook 'LaTeX-mode-hook
  '(lambda()
     (load-file "~/elisp/misc/my-latex.el")  ; load these LaTeX preferences
     ))
(setq-default abbrev-mode t)                            ; enable abbreviations
(setq save-abbrevs t)                                   ; save abbreviations upon exiting xemacs
;;(setq abbrev-file-name "~/.xemacs/my-abbreviations.el") ; the file storing the abbreviations
(if (file-readable-p abbrev-file-name)                  ; read the abbreviations every
  (read-abbrev-file abbrev-file-name)                   ; time xemacs is started
  )

(setq hippie-expand-try-functions-list 
   '(try-complete-file-name-partially 
     try-complete-file-name 
     try-expand-all-abbrevs 
     try-expand-list 
     try-expand-line 
     try-expand-dabbrev 
     try-expand-dabbrev-all-buffers 
     try-expand-dabbrev-from-kill 
     try-complete-lisp-symbol-partially 
     try-complete-lisp-symbol)) 

;;;;;;;;;;;;;;;;;;;;
;; set up unicode
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; This from a japanese individual.  I hope it works.
(setq default-buffer-file-coding-system 'utf-8)
;; From Emacs wiki
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; MS Windows clipboard is UTF-16LE 
;(set-clipboard-coding-system 'utf-16le-dos)

(load-file "/home/phil/elisp/dvc-load.el")
(require 'dvc-autoloads)
(setq-default resize-mini-windows nil)
;(require 'ahg)

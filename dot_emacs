(setq load-path (cons (expand-file-name "~phil/elisp") load-path))


(when (locate-library "edit-server")
  (require 'edit-server)
  (setq edit-server-new-frame 1)
  (edit-server-start))



(setq load-path (cons (expand-file-name "~phil/elisp/notes/lisp") load-path))

(setq load-path (cons (expand-file-name "~phil/elisp/mailcrypt/share/emacs/site-lisp") load-path))

(setq load-path (cons (expand-file-name "~phil/elisp/misc") load-path))

(load-library "mailcrypt")
(mc-setversion "gpg") ;; Alternately, "2.6" or "gpg"

(define-key global-map "\C-xx" 'abbrev-mode)
(setq save-abbrevs t)
;(quietly-read-abbrev-file) 
(setq message-log-max 500)
(setq log-message-max-size 500)
(load-file "~/elisp/misc/my-text.el")
(load-file "~/elisp/misc/my-latex.el")

(add-to-list 'load-path "~phil/elisp/python-mode.el-6.1.1") 
(setq py-install-directory "~phil/elisp/python-mode.el-6.1.1")
(setq py-shell-name "ipython")
(require 'python-mode)

;(load "browse-yank")
;(global-set-key [?\C-x ?\C-y] 'browse-yank)


;(setq ipython-command "/Library/Frameworks/EPD64.framework/Versions/7.3/bin/ipython")
;(require 'ipython)


;(add-hook 'python-mode-hook 'turn-on-font-lock)
;(load "emacs-python")


(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (quietly-read-abbrev-file "/Users/phil/.abbrev_defs")
	    (setq local-abbrev-table LaTeX-mode-abbrev-table)
 	    (abbrev-mode t)
 	    ))

(setq-default abbrev-mode t)                            ; enable abbreviations
(setq save-abbrevs t)                                   ; save abbreviations upo

; Tell XEmacs to load `my-latex.el' when opening LaTeX files
(add-hook 'LaTeX-mode-hook
  '(lambda()
     (load-file "~/elisp/misc/my-latex.el")  ; load these LaTeX preferences
     ))
(setq-default abbrev-mode t)                            ; enable abbreviations
(setq save-abbrevs t)                                   ; save abbreviations upon exiting xemacs
;;(setq abbrev-file-name "~/.xemacs/my-abbreviations.el") ; the file storing the abbreviations
(if (file-readable-p abbrev-file-name)                  ; read the abbreviations every
  (read-abbrev-file abbrev-file-name)                   ; time xemacs is started
  )

(require 'notes-variables)
(setq auto-mode-alist
  	(cons (cons "/9[0-9][0-9][0-9][0-9][0-9].?$" 'notes-mode)
  	      auto-mode-alist))
(define-key global-map "\C-cn" 'notes-index-todays-link)
(define-key global-map [(control c) (return)] 'notes-w3-follow-link)

(setq auto-mode-alist (cons '("\\.txt\\'" . notes-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.nm\\'" . notes-mode) auto-mode-alist))

(load-library "mailcrypt")

(put 'upcase-region 'disabled nil)

(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
(require 'yasnippet)
(yas-global-mode 1)

;; Bind this to control-X w (normally undefined):
(setq browse-url-browser-function 'browse-url-firefox)
(global-set-key "\C-xw" browse-url-browser-function)



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-firefox-program "/Users/phil/bin/chromebash")
 '(ispell-local-dictionary "english")
 '(py-python-command-args (quote ("--pylab=osx"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;from: http://trey-jackson.blogspot.com/2008/08/emacs-tip-25-shell-dirtrack-by-prompt.html
(add-hook 'shell-mode-hook
        #'(lambda ()
            (shell-dirtrack-mode nil)
            (add-hook 'comint-preoutput-filter-functions
                      'shell-sync-dir-with-prompt nil t)))

(defun shell-sync-dir-with-prompt (string)
"A preoutput filter function (see `comint-preoutput-filter-functions')
which sets the shell buffer's path to the path embedded in a prompt string.
This is a more reliable way of keeping the shell buffer's path in sync
with the shell, without trying to pattern match against all
potential directory-changing commands, ala `shell-dirtrack-mode'.

In order to work, your shell must be configured to embed its current
working directory into the prompt.  Here is an example .zshrc and .bashrc
snippet which turns this behavior on when running as an inferior Emacs shell:

zsh

  if [ $EMACS ]; then
     prompt='|Pr0mPT|%~|[%n@%m]%~%# '
  fi

The part that Emacs cares about is the '|Pr0mPT|%~|'
Everything past that can be tailored to your liking.
"
(if (string-match "|Pr0mPT|\\([^|]*\\)|" string)
    (let ((cwd (match-string 1 string)))
      (setq default-directory
            (if (string-equal "/" (substring cwd -1))
                cwd
              (setq cwd (concat cwd "/"))))
      (replace-match "" t t string 0))
  string))

(setq font-lock-maximum-decoration t)
(add-hook 'python-mode-hook 'turn-on-font-lock)

(setq-default calendar-latitude +49.2333)
(setq-default calendar-longitude -123.25)

(setq load-path (cons (expand-file-name "~phil/elisp/misc") load-path))
(load "plocal")        ; local functions for geography

(setq auto-mode-alist (append '(("\\.ht$" . rst-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.rst$" . rst-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.pyx$" . python-mode)) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.nm\\'" . notes-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.txt\\'" . notes-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.tex\\'" . latex-mode) auto-mode-alist))

(select-keys) ; choose-a-buffer for keys f3 and f9-f12

(global-set-key [f8] 'compile)
(global-set-key [f7] 'fill-paragraph)
(global-set-key [f6] 'auto-fill-mode) 
(global-set-key [f5] 'overwrite-mode) 
(global-set-key [f4] 'rst-mode) 
(global-set-key [f2] 'choose-csh2) 
(global-set-key [f1] 'choose-csh1) 

(setq reftex-insert-label-flags '("se" "sfte"))
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(setq reftex-enable-partial-scans t)
(setq reftex-save-parse-info t)
(setq reftex-use-multiple-selection-buffers t)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-cite-format 'natbib)

(setq grep-command "grep -n -H -i ")


(defun choose-csh1 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh1"))

(defun choose-csh2 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh2"))

(defun choose-python (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "*IPython*"))


(defun choose-research (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "research.org"))


(defun choose-teaching (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "teaching.org"))

(defun choose-admin (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "admin.org"))

(defun choose-personal (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "personal.org"))

(defun choose-gtd (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "gtd.org"))

(defun choose-tasks (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "tasks.org"))

(defun choose-journal (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "journal.org"))


(make-shell "csh1")    ; Create a shell called "csh1"
(other-window 1)
(make-shell "csh2")    ; Create another shell in the other window

(getenv "PATH")
(setenv "PATH"
(concat
"/Users/phil/continuum/anaconda/bin" ":" "/usr/texbin" ":" "/Users/phil/bin" ":" "/usr/local/texlive/2012/bin/x86_64-darwin" ":"
(getenv "PATH")))

(autoload 'send-region-to-omnifocus-quickentry "omnifocus" "Send the selected region to OmniFocus's Quick Entry window" t)
(global-set-key "\C-c\C-o" 'send-region-to-omnifocus-quickentry)
(put 'downcase-region 'disabled nil)

(require 'filladapt)
(setq-default filladapt-mode t)

(require 'show-wspace);
(add-hook 'font-lock-mode-hook 'highlight-tabs)

(load "highlight-region") ; prepend text to a region

(require 'package)
(add-to-list 'package-archives 
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))

;(eval-after-load "geiser" '(require quack))

;(add-to-list 'load-path "~/emacs/org")
(require 'org)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-agenda-files '("~/Dropbox/org"))


; I prefer return to activate a link
(setq org-return-follows-link t)

(setq org-tags-exclude-from-inheritance '("PROJECT"))
 
 
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(defun gtd ()
   (interactive)
   (find-file "~/Dropbox/org/gtd.org")
)


(defun research ()
   (interactive)
   (find-file "~/Dropbox/org/research.org")
)

(defun teaching ()
   (interactive)
   (find-file "~/Dropbox/org/teaching.org")
)

(defun admin ()
   (interactive)
   (find-file "~/Dropbox/org/admin.org")
)


(defun personal ()
   (interactive)
   (find-file "~/Dropbox/org/personal.org")
)

(defun tasks ()
   (interactive)
   (find-file "~/Dropbox/org/tasks.org")
)

(defun journal ()
   (interactive)
   (find-file "~/Dropbox/org/journal.org")
)


(setq org-return-follows-link t)
 

(gtd)
(research)
(admin)
(teaching)
(personal)
(tasks)
(journal)


(global-set-key "\C-cp" 'choose-personal)
(global-set-key "\C-cr" 'choose-research)
(global-set-key "\C-ci" 'choose-teaching)
(global-set-key "\C-cw" 'choose-admin)
(global-set-key "\C-cg" 'choose-gtd)
(global-set-key "\C-ct" 'choose-tasks)
(global-set-key "\C-cj" 'choose-journal)

(setq org-agenda-custom-commands
      '(("p" "Project List"
          ( (tags "PROJECT")
          )
        )
        ("w" todo "WAITING" nil) 
        ("f" todo "FILED" nil) 
        ("n" todo "NEXT" nil)
        ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))
        ("O" "Office"
          ( (agenda)
            (tags-todo "OFFICE")
          )
        )
        ("W" "Weekly Plan"
          ( (agenda)
            (todo "TODO")
            (tags "PROJECT")
          )
        )
        ("H" "Home NA Lists"
          ( (agenda)
            (tags-todo "HOME")
            (tags-todo "COMPUTER")
          )
        )
       )
  )


;; (defun my-skip-unless-waiting ()
;;        "Skip trees that are not waiting"
;;        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
;;          (if (re-search-forward ":waiting:" subtree-end t)
;;              nil          ; tag found, do not skip
;;            subtree-end))) ; tag not found, continue after end of subtree

;; (org-add-agenda-custom-command
;;       '("b" todo "PROJECT"
;;         ((org-agenda-skip-function 'my-skip-unless-waiting)
;;          (org-agenda-overriding-header "Projects waiting for something: "))))

(setq org-default-notes-file "/Users/phil/Dropbox/org/tasks.org")
(define-key global-map "\C-cc" 'org-capture)



;(add-hook 'org-mode-hook
;          '(lambda ()
;             (define-key org-mode-map [(control l)] nil)))

(setenv "rm" "/Users/phil/Dropbox/readmes")

(load "browse-yank")
(global-set-key [?\C-x ?\C-y] 'browse-yank)


     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/tasks.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
      '(("f" "Filed" entry (file+headline "~/Dropbox/org/tasks.org" "Tasks")
             "* FILED %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
             "* %?"))))

;http://www.emacswiki.org/emacs/CuaMode
;http://ergoemacs.org/emacs/modernization.html
;(cua-mode t)
;    (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;    (transient-mark-mode 1) ;; No region when it is not highlighted
;    (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour



(setq load-path (cons (expand-file-name "~phil/elisp") load-path))


(when (locate-library "edit-server")
  (require 'edit-server)
  (setq edit-server-new-frame 1)
  (edit-server-start))

(setq default-directory "~/repos") 


;(setq load-path (cons (expand-file-name "~phil/elisp/mailcrypt/share/emacs/site-lisp") load-path))

(setq load-path (cons (expand-file-name "~phil/elisp/misc") load-path))

(require 'shell-command)
(shell-command-completion-mode)

(require 'bash-completion)
(bash-completion-setup)


(put 'upcase-region 'disabled nil)

;M-x list packages
(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))

(package-initialize)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;(require 'yasnippet) (yas-global-mode 1)

(require 'gist)
(setq yagist-github-token "7c30faa7e2890b1a2ce878f43464c493ea74d683")
(require 'magit)
(load-theme 'adwaita t)


;; Bind this to control-X w (normally undefined):
(setq browse-url-browser-function 'browse-url-firefox)


(setenv "or" "/Users/phil/repos/org")
(setenv "bibs" "/Users/phil/repos/bibs")
;http://ergoemacs.org/emacs/emacs_env_var_paths.html

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-firefox-program "/Users/phil/bin/chromebash")
 '(elpy-interactive-python-command "/Users/phil/miniconda3/bin/python3")
 '(elpy-rpc-python-command "/Users/phil/miniconda3/bin/python3")
 '(exec-path
   (quote
    ("/usr/bin" "/bin" "/usr/sbin" "/sbin" "/usr/local/bin" "/usr/local/texlive/2015/bin/x86_64-darwin")) nil nil "http://ergoemacs.org/emacs/emacs_env_var_paths.html")
 '(gist-list-format
   (quote
    ((id "Id" 10 nil identity)
     (created "Created" 20 nil "%D %R")
     (visibility "Visibility" 10 nil
                 (lambda
                   (public)
                   (or
                    (and public "public")
                    "private")))
     (description "Description" 0 t identity))))
 '(ispell-local-dictionary "english")
 '(org-agenda-files
   (quote
    ("/Users/phil/repos/org/diary.org" "/Users/phil/repos/org/research.org" "/Users/phil/repos/org/personal.org" "/Users/phil/repos/org/teaching.org" "/Users/phil/repos/org/admin.org")))
 '(org-mobile-directory "~/orgtransfer")
 '(org-mobile-inbox-for-pull "~/repos/org/from-mobile.org")
 '(tls-checktrust nil))


(global-set-key "\C-xw" browse-url-browser-function)


;from: http://trey-jackson.blogspot.com/2008/08/emacs-tip-25-shell-dirtrack-by-prompt.html
(add-hook 'shell-mode-hook
        '(lambda ()
             (shell-dirtrack-mode nil)
            (add-hook 'comint-preoutput-filter-functions
                      'shell-sync-dir-with-prompt nil t)))

(defun shell-sync-dir-with-prompt (string)
"A preoutput filter function (see `comint-preoutput-filter-functions')
which sets the shell buffer's path to the path embedded in a prompt string.
This is a more reliable way of keeping the shell buffer's path in sync
with the shell, without trying to pattern match against all
potential directory-changing commands, ala `shell-dirtrack-mode'.

In order to work, your shell must be configured to embed its current
working directory into the prompt.  Here is an example .zshrc and .bashrc
snippet which turns this behavior on when running as an inferior Emacs shell:

zsh

  if [ $EMACS ]; then
     prompt='|Pr0mPT|%~|[%n@%m]%~%# '
  fi

The part that Emacs cares about is the '|Pr0mPT|%~|'
Everything past that can be tailored to your liking.
"
(if (string-match "|Pr0mPT|\\([^|]*\\)|" string)
    (let ((cwd (match-string 1 string)))
      (setq default-directory
            (if (string-equal "/" (substring cwd -1))
                cwd
              (setq cwd (concat cwd "/"))))
      (replace-match "" t t string 0))
  string))

(setq font-lock-maximum-decoration t)
;(add-hook 'python-mode-hook 'turn-on-font-lock)

(setq-default calendar-latitude +49.2333)
(setq-default calendar-longitude -123.25)

(setq load-path (cons (expand-file-name "~phil/elisp/misc") load-path))
(load "plocal")        ; local functions for geography

(setq auto-mode-alist (append '(("\\.ht$" . rst-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.rst$" . rst-mode)) auto-mode-alist))
;(setq auto-mode-alist (append '(("\\.pyx$" . python-mode)) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.nm\\'" . notes-mode) auto-mode-alist))
;(setq auto-mode-alist (cons '("\\.txt\\'" . notes-mode) auto-mode-alist))
;(setq auto-mode-alist (cons '("\\.tex\\'" . latex-mode) auto-mode-alist))

(load "auctex.el" nil t t)

;; AucTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)

(setq reftex-insert-label-flags '("se" "sfte"))
(setq reftex-enable-partial-scans t)
(setq reftex-save-parse-info t)
(setq reftex-use-multiple-selection-buffers t)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-cite-format 'natbib)


;;http://www.stefanom.org/setting-up-a-nice-auctex-environment-on-mac-os-x/
;; Use Skim as viewer, enable source <-> PDF sync
;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
      :help "Run latexmk on file")
    TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(select-keys) ; choose-a-buffer for keys f3 and f9-f12

(global-set-key [f9] 'python-mode)
(global-set-key [f8] 'org-mode)
(global-set-key [f7] 'fill-paragraph)
(global-set-key [f6] 'auto-fill-mode) 
(global-set-key [f5] 'choose-a-buffer) 
(global-set-key [f4] 'choose-a-buffer) 
(global-set-key [f3] 'choose-a-buffer) 
(global-set-key [f2] 'choose-csh2) 
(global-set-key [f1] 'choose-csh1) 




(setq grep-command "grep -n -H -i ")


(defun choose-csh1 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh1"))

(defun choose-csh2 (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "csh2"))

(defun choose-python (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "*ABI Ipython*"))


(defun choose-research (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "research.org"))


(defun choose-teaching (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "teaching.org"))

(defun choose-admin (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "admin.org"))

(defun choose-personal (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "personal.org"))

(defun choose-gtd (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "gtd.org"))

(defun choose-tasks (&optional re-assign)
  "Set a key to a buffer"
  (interactive "P")
  (switch-to-buffer "tasks.org"))


(make-shell "csh1")    ; Create a shell called "csh1"
(other-window 1)
(make-shell "csh2")    ; Create another shell in the other window

;(setenv "PATH"
;(concat "/Users/phil/miniconda3/bin" ":" "/usr/texbin" ":" "/Users/phil/bin" ":" (getenv "PATH")))

(autoload 'send-region-to-omnifocus-quickentry "omnifocus" "Send the selected region to OmniFocus's Quick Entry window" t)
(global-set-key "\C-c\C-o" 'send-region-to-omnifocus-quickentry)
(put 'downcase-region 'disabled nil)

(require 'filladapt)
(setq-default filladapt-mode t)

(require 'show-wspace);
(add-hook 'font-lock-mode-hook 'highlight-tabs)

(load "highlight-region") ; prepend text to a region

;(eval-after-load "geiser" '(require quack))

;(add-to-list 'load-path "~/emacs/org")
;(require 'org)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
'(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)


; I prefer return to activate a link
 
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(defun gtd ()
   (interactive)
   (find-file "~/repos/org/gtd.org")
)


(defun research ()
   (interactive)
   (find-file "~/repos/org/research.org")
)

(defun teaching ()
   (interactive)
   (find-file "~/repos/org/teaching.org")
)

(defun admin ()
   (interactive)
   (find-file "~/repos/org/admin.org")
)


(defun personal ()
   (interactive)
   (find-file "~/repos/org/personal.org")
)

(defun tasks ()
   (interactive)
   (find-file "~/repos/org/tasks.org")
)

(setq org-return-follows-link t)

(setq org-tags-exclude-from-inheritance '("PROJECT" "WAITING" "crypt"))
 

(setq org-return-follows-link t)
;(setq org-agenda-files '("~/repos/org" "~/repos/bibs"))
 ; Targets include this file and any file contributing to the agenda - up to 9 levels deep

(setq org-refile-targets (quote ((nil :maxlevel . 1)
                                 (org-agenda-files :maxlevel . 1))))

;; make ido display choices vertically
;(setq ido-separator "\n")

;; display any item that contains the chars you typed
;(setq ido-enable-flex-matching t)

;(setq ido-file-extensions-order '(".org"  ".py" ".txt" ".pyx"))
;(setq ido-ignore-extensions t)

; Use full outline paths for refile targets - we file directly with IDO
;(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
;(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO for both buffer and file completion and ido-everywhere to t
;(setq org-completion-use-ido t)
;(setq ido-everywhere t)
;(setq ido-max-directory-size 100000)
;(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
;(setq ido-default-file-method 'selected-window)
;(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;(gtd)
;(research)
;(admin)
;(teaching)
;(personal)
;(tasks)



(global-set-key "\C-cp" 'choose-personal)
(global-set-key "\C-cr" 'choose-research)
(global-set-key "\C-ci" 'choose-teaching)
(global-set-key "\C-cw" 'choose-admin)
(global-set-key "\C-cg" 'choose-gtd)
(global-set-key "\C-ct" 'choose-tasks)



(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t)

(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING" . t) ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

(setq org-directory "~/repos/org")
(setq org-default-notes-file "~/repos/org/refile.org")

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

(put 'dired-find-alternate-file 'disabled nil)

;;https://github.com/jhelwig/ack-and-a-half
;;http://beyondgrep.com/
;;curl http://beyondgrep.com/ack-2.10-single-file > ~/bin/ack && chmod 0755 !#:3
;;(add-to-list 'load-path "/path/to/ack-and-a-half")
(require 'ack-and-a-half)
;; Create shorter aliases
(defalias 'ack 'ack-and-a-half)
(defalias 'ack-same 'ack-and-a-half-same)
(defalias 'ack-find-file 'ack-and-a-half-find-file)
(defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
(setq ack-and-a-half-executable "/Users/phil/bin/ack")

(defvar server-buffer-clients)
(when (and (fboundp 'server-start) (string-equal (getenv "TERM") 'xterm))
  (server-start)
  (defun fp-kill-server-with-buffer-routine ()
    (and server-buffer-clients (server-done)))
  (add-hook 'kill-buffer-hook 'fp-kill-server-with-buffer-routine))

(server-start)

(setq-default ispell-program-name "/usr/local/bin/ispell")
(setq auto-mode-alist (cons '("\\.txt\\'" . text-mode) auto-mode-alist))

(setq org-agenda-start-day "-2d")
(setq org-agenda-span 10)


(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/repos/org/refile.org" "Tasks")
             "* TODO [#A] %?    \n  %i\n  %a")
       ("n" "Note" entry  (file+headline "~/repos/org/refile.org" "Notes")
        "* %?   :NOTE: \n  %i\n  %a")))

;(setq org-capture-templates
;      '(("t" "todo" entry (file+headline "/Users/bjm/todo.org" "Tasks")
;         "* TODO [#A] %?")))

(setq org-agenda-custom-commands
      '(("p" "Project List"
          ( (tags "PROJECT")
          )
        )
        ("w" tags-todo "WAITING" nil) 
        ("f" todo "FILED" nil) 
        ("n" todo "NEXT" nil)
        ("o" tags "NOTE" nil)
        ("d" "Agenda + Next Actions" ((agenda) (todo "NEXT")))
        ("O" "Office"
          ( (agenda)
            (tags-todo "OFFICE")
          )
        )
        ("W" "Weekly Plan"
          ( (agenda)
            (todo "TODO")
            (tags "PROJECT")
          )
        )
        ("H" "Home Lists"
          ( (agenda)
            (tags-todo "HOME")
            (tags-todo "COMPUTER")
          )
        )
       )
  )


(setq org-agenda-include-diary t)
(setq org-agenda-diary-file "~/repos/org/diary.org")

(require 'org-crypt)
(org-crypt-use-before-save-magic)
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)

(load-library "browse-yank")
(global-set-key "\C-x\C-y" 'browse-yank)

(setenv "or" "/Users/phil/repos/org")
(setenv "rm" "/Users/phil/repos/readmes")

;;http://lists.gnu.org/archive/html/emacs-orgmode/2010-04/msg01057.html
;; 1. window gets split horizontally (one on TOP of the other), AND
;; 2. AFTER splitting, further "C-x 4 b" will NOT lead to any more splitting - reuse gets preferred
(setq split-height-threshold 40) ; nil
(setq split-width-threshold nil) ; 100

;;some unrelated customizations I made at the time (since I want the agenda front and center when I'm looking at it):
(setq org-agenda-window-setup 'reorganize-frame)
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-window-frame-fractions '(1.0 . 1.0))

;http://www.emacswiki.org/emacs/FrameSize
(add-to-list 'default-frame-alist '(height . 55))
(add-to-list 'default-frame-alist '(width . 180))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;(setq inhibit-startup-screen t)
;(setq initial-major-mode 'org-mode)
(require 'magit)
(setq load-path (cons (expand-file-name "~phil/repos/emacs-ipython-notebook/lisp") load-path))

;; (require 'ein-loaddefs)
;; (eval-when-compile (require 'ein-notebooklist))
;; (require 'ein)

;http://tex.stackexchange.com/questions/24510/pdflatex-fails-within-emacs-app-but-works-in-terminal
;http://ergoemacs.org/emacs/emacs_env_var_paths.html

(setq exec-path
'(
"/usr/local/texlive/2015/bin/x86_64-darwin"
"/Users/phil/bin"
"/usr/local/bin"
"/usr/bin"
"/bin"
"/usr/sbin"
))

(getenv "PATH")
 (setenv "PATH"
(concat
 "/usr/local/texlive/2015/bin/x86_64-darwin" ":"
 "/usr/local/bin" ":"
(getenv "PATH")))

(setq-default indent-tabs-mode nil)

(setenv "e340"
(concat
   (getenv "HOME")
   "/Dropbox/e340_2014_spring/"))

(setenv "e340f"
(concat
   (getenv "HOME")
   "/Dropbox/e340 FILES FOR CONNECT/"))


(setenv "ecode"
(concat
   (getenv "HOME")
   "/repos/e582_code/"))

(setenv "eweb"
(concat
   (getenv "HOME")
   "/repos/e582_web/"))

(load-theme 'adwaita t)


(elpy-enable)
(setq python-shell-interpreter "/Users/phil/miniconda3/bin/ipython")
(setq python-check-command (expand-file-name "/Users/phil/miniconda3/bin/pyflakes"))
(elpy-use-ipython "/Users/phil/miniconda3/bin/ipython")
(setq yas-triggers-in-field t)
(setq yas-snippet-dirs
      '("~/repos/snippets"
        yas-installed-snippets-dir))
(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.

;http://orgmode.org/manual/Conflicts.html
(add-hook 'org-mode-hook
                    (lambda ()
                      (org-set-local 'yas/trigger-key [tab])
                      (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))


;order is important to set org-mode correctly
(setq org-journal-dir "~/repos/org/journal/")
(require 'org-journal)
(add-to-list 'org-agenda-files (expand-file-name "~/repos/org/journal/"))
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\'\\|[0-9]+")
(require 'eldoro)


(setq org-use-property-inheritance '("PRIORITY"))

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;;set colours for priorities
(setq org-priority-faces '((?A . (:foreground "Red" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))




(defun markdown-preview-file ()
  "use Marked 2 to preview the current file"
  (interactive)
  (shell-command 
   (format "open -a 'Marked 2.app' %s" 
       (shell-quote-argument (buffer-file-name))))
)
(global-set-key "\C-cm" 'markdown-preview-file)

(global-set-key (kbd "C-x g") 'magit-status)

(dolist (hook '(rst-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
      
(autoload 'vkill "vkill" nil t)
(autoload 'list-unix-processes "vkill" nil t)


(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(setq org-ellipsis "⤵")
(show-paren-mode 1)


;http://emacs.stackexchange.com/questions/10900/copy-text-from-emacs-to-os-x-clipboard
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(setq interprogram-cut-function 'paste-to-osx)
(setq interprogram-paste-function 'copy-from-osx)


;https://github.com/rranelli/auto-package-update.el
(require 'auto-package-update)
;(auto-package-update-maybe)
;(auto-package-update-now)

;##################
; mu4e
;#################


(add-to-list 'load-path "/usr/local/Cellar/mu/HEAD/share/emacs/site-lisp/mu4e")
(require 'mu4e)
(setq mu4e-mu-binary "/usr/local/bin/mu")
(require 'org-mu4e)

;https://gist.github.com/chlalanne/7397629
(require 'offlineimap)
(require 'mu4e)
(require 'mu4e-maildirs-extension)
(mu4e-maildirs-extension)
(setq mu4e-maildir (expand-file-name "~/maildir"))

(setq mu4e-maildir-shortcuts
      '(("/eos/INBOX"          . ?i)
        ("/eos/Sent"           . ?s)
        ("/eos/Trash"          . ?t)
        ("/eos/Drafts"         . ?d)
        ("/eos/Y2016-01"       . ?r)
        ("/eos/B2016-01"       . ?b)
        ("/ubc/INBOX"          . ?u)))
        
(add-to-list 'mu4e-bookmarks '("flag:attach"    "Messages with attachment"   ?a) t)
(add-to-list 'mu4e-bookmarks '("size:5M..500M"  "Big messages"               ?b) t)
(add-to-list 'mu4e-bookmarks '("flag:flagged"   "Flagged messages"           ?f) t)

(setq mu4e-headers-date-format "%Y-%m-%d %H:%M:%S"
      mu4e-headers-fields '((:date . 20)
                            (:flags . 5)
                            (:mailing-list . 10)
                            (:from-or-to . 25)
                            (:subject . nil))) 
;-----------------------
; set up default account
;-----------------------

(require 'smtpmail)


(setq message-kill-buffer-on-exit t
      mu4e-sent-messages-behavior 'sent
      mu4e-headers-skip-duplicates t
      mu4e-headers-include-related t
      mail-user-agent 'mu4e-user-agent
      mu4e-get-mail-command "offlineimap"
      mu4e-attachment-dir  "~/Downloads"
      smtpmail-queue-mail  nil
      smtpmail-queue-dir   "~/maildir/queue/cur")

;http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/
;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)

(setq mu4e-sent-folder "/eos/INBOX"
      mu4e-drafts-folder "/eos/Drafts"
      mu4e-trash-folder "/eos/Trash"
      mu4e-refile-folder "/eos/Y2016-01"
      mu4e-reply-to-address "paustin@eos.ubc.ca"
      user-mail-address "paustin@eos.ubc.ca"
      message-send-mail-function 'smtpmail-send-it
      smtpmail-auth-credentials
      (expand-file-name "~/.authinfo.gpg")
      smtpmail-default-smtp-server "smtp.googlemail.com"
      smtpmail-smtp-server "smtp.googlemail.com"
      user-full-name "Phil Austin"
      message-signature "best, Phil"
      message-citation-line-format "On %Y-%m-%d %H:%M:%S, %f wrote:"
      message-citation-line-function 'message-insert-formatted-citation-line
      mu4e-headers-results-limit 250
      smtpmail-smtp-service 465
      starttls-use-gnutls t
      smtpmail-stream-type 'tls
      starttls-gnutls-program "gnutls-cli"
      smtpmail-debug-info
      smtpmail-debug-verb)

;http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html
(defvar my-mu4e-account-alist
  '(("eos"
     (user-mail-address  "paustin@eos.ubc.ca")
     (user-full-name     "Phil Austin")
     (mu4e-sent-folder   "/eos/INBOX")
     (mu4e-drafts-folder "/eos/Drafts")
     (mu4e-trash-folder  "/eos/Trash")
     (mu4e-refile-folder "/eos/Y2016-01"))
    ("ubc"
     (user-mail-address  "austin@mail.ubc.ca")
     (mu4e-sent-folder   "/ubc/INBOX")
     (mu4e-refile-folder "/eos/Y2016-01")
     (mu4e-drafts-folder "/ubc/Drafts")
     (mu4e-trash-folder  "/ubc/Trash")
     (smtpmail-default-smtp-server "smtp.mail.ubc.ca")
     (smtpmail-smtp-server "smtp.mail.ubc.ca"))))

(setq mu4e-user-mail-address-list
      (mapcar (lambda (account) (cadr (assq 'user-mail-address account)))
              my-mu4e-account-alist))
             


(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

;https://postmomentum.ch/steckemacs.html
(require 'quelpa)

(if (require 'quelpa nil t)
    (quelpa '(quelpa :repo "quelpa/quelpa" :fetcher github) :upgrade t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
(quelpa '(key-chord :fetcher wiki))
(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.03)
(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
(setq mu4e-action-tags-header "X-Keywords")
(key-chord-define-global "nm" 'mu4e)
(mu4e)

;http://hack.org/mc/blog/mu4e.html
(add-to-list 'mu4e-bookmarks
             '("maildir:/eos/INBOX flag:flagged OR maildir:/eos/INBOX flag:unread" "Unread or flagged in eos INBOX" ?h))
(setq mu4e-view-show-addresses t)
